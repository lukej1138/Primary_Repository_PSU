/*
  Lucas Johnson
  Red Black Tree Main Function
  4/3/2024
 */
//1 = RED;
//0 = BLACK;
#include <iostream>
#include <cstring>
#include "node.h"
#include <fstream>
using namespace std;
//Function prototypes
void printTree(node* head, int count);
node* addTree(node* &head, node* thingy);
char* valid_input();
void add2Tree(node* &root, node* &head, node* thingy);
bool searchTree(node* head, int thingy);
//void delTree(node* head, node* previous, int thingy);
node* successorFinder(node* head);
bool findChildSide(node* Gparent, node* head);
void Case3(node* &root, node* &Gparent, node* &uncle, node* &head);
void leftRotation(node* &head, node* &thingy);
void rightRotation(node* &head, node* &thingy);
void deletion1(node* head, int thingy, node* &root);
void deletion2(node* x, int saveColor, node* &root, node* Gparent);
void DoublyBlackCase(node* newHead, node* &root, node* Gparent);
int main(){
  //Head node, basic "global" variables declared
  //Set up while loop for game
  node* head = NULL;
  bool programRunnin = true;
  char* to_do = new char[20];
  while(programRunnin){
    strcpy(to_do, valid_input());
    //Uses string (read in above) to determine what to do (specific command)
    if(strcmp(to_do, "ADD") == 0){
      char input[10];
      cout << "type file or cmd, file for file upload or cmd for manual" << endl;
      cin.get(input, 9);
      cin.get();
      //Adds one value at a time                                             
      if(strcmp(input, "cmd") == 0){
        int size = 0;
        cout << "How many inputs do you have?" << endl;
        cin >> size;
        int input = 0;
        for(int i = 0; i < size; i++){
          cout << "Input a number" << endl;
          cin >> input;
          cin.get();
	  node* thingy = new node(input, 1);
          node* parent = addTree(head, thingy);
	  add2Tree(head, parent, thingy);
        }
      }
      //Reads in from Numbers.rtf to automatically fill the tree              
      else if(strcmp(input, "file") == 0){
        fstream fin;
        fin.open("Numbers.rtf");
        int input1 = 0;
        while(fin >> input1){
          int temp = input1;
	  node* thingy = new node(temp, 1);
          node* parent = addTree(head, thingy);
	  add2Tree(head, parent, thingy);
        }
        fin.close();
      }
    } else if(strcmp(to_do, "QUIT") == 0){
      programRunnin = false;
    } else if(strcmp(to_do, "PRINT") == 0){
      int count = 0;
      printTree(head, count);
    } else if(strcmp(to_do, "SEARCH") == 0){
      int thing = 0;
      cout << "Give us a number to search for" << endl;
      cin >> thing;
      cin.get();
      bool found = searchTree(head, thing);
      if(found){
	cout << "That number is in this tree!" << endl;
      }
      else{
	cout << "We couldn't find that number in the tree." << endl;
      }
    } else if(strcmp(to_do, "DELETE") == 0){
      int num = 0;
      cout << "What are we deleting?" << endl;
      cin >> num;
      cin.get();
      deletion1(head, num, head);

    }
  }

}

//Uses Stack print function, modified to read out the tree.
void printTree(node* head, int count){
  if(head->getRightNext() != NULL){
    printTree(head->getRightNext(), count+1);
  }
  for(int i = 0; i < count; i++){
    cout << '\t';
  }
  if(head->getColor() == 0){
    cout << 'B';
  }
  else{
    cout << 'R';
  }
  cout << head->getVal() << endl;

  if(head->getLeftNext() != NULL){
    printTree(head->getLeftNext(), count+1);
  }
}

//Go left/right by comparing the current "Head" with node being added. Keep going until at the end. Returns the head node to be used for rebalancing in following function.
node* addTree(node* &head, node* thingy){
  if(head == NULL){
    head = thingy;
    thingy->setParent(NULL);
    return head;
  }
  if(thingy->getVal() < head->getVal()){
    if(head->getLeftNext() != NULL){
      node* temp1 = head->getLeftNext();
      return addTree(temp1, thingy);
    }else{
     head->setLeftNext(thingy);
     thingy->setParent(head);
     return head;
    }
  }else{
    if(head->getRightNext() != NULL){
      node* temp2 = head->getRightNext();
      return addTree(temp2, thingy);
    }else{
      head->setRightNext(thingy);
      thingy->setParent(head);
      return head;
    }
  }
}

  

  

//Function that checks for valid input, making sure a valid keyword is inputted by the user
char* valid_input(){
  cout << endl;
  char* input = new char[11];
  bool good_input = false;
  while(good_input == false){
    cout << "Please input what you would like to do (ADD, PRINT, QUIT, SEARCH, DELETE. There is a character limit of 10." << endl;
    cin.get(input, 10);
    cin.get();
    if((strcmp(input, "ADD") != 0) && (strcmp(input,"DELETE") != 0) && (strcmp(input,"PRINT") != 0) && (strcmp(input, "QUIT") != 0) && (strcmp(input, "SEARCH") !=0)){
      cout << "Please select a valid input" << endl;
      continue;
    }
    else{
      good_input = true;
    }


  }
  return input;
}

  //True = right, false = left
bool findChildSide(node* Gparent, node* head){
  if(Gparent->getRightNext() == head){
    return true;
  }
  return false;
}

//For when uncle is red and parent is read. Recolors such that Gparent is red, head/uncle become black. Rerun's all checks on Gparent again.
void Case3(node* &root, node* &Gparent, node* &uncle, node* &head){
  head->setColor(0);
  uncle->setColor(0);
  if(Gparent->getParent() != NULL){
    Gparent->setColor(1);
    node* tempG = Gparent;
    Gparent = Gparent->getParent();
    head = tempG;
    bool checkSide = findChildSide(Gparent, head);
    if(checkSide){
      //Head is Right
      uncle = Gparent->getLeftNext();
    }
    else{
      //Head is Left
      uncle = Gparent->getRightNext();
    }
    add2Tree(root, Gparent, head);    
  }
}
//Following function to addTree. Determines case and executes proper measures.
void add2Tree(node* &root, node* &head, node* thingy){
  //Case one and two.
  if(head == thingy){
    thingy->setColor(0);
    return;
  }
  if(thingy->getParent()->getColor() == 0){
    return;
  }
  //Case 3, 4, 5;
  if(head->getParent() != NULL){
    node* Gparent = head->getParent();
    bool checkSide = findChildSide(Gparent, head);
    node* uncle = NULL;
    if(checkSide){
      //Head is Right
      uncle = Gparent->getLeftNext();
    }else{
      //Head is Left
      uncle = Gparent->getRightNext();
    }
    if(uncle != NULL && uncle->getColor() == 1 && head->getColor() == 1){
      Case3(root, Gparent, uncle, head);
    }
    if(uncle == NULL || uncle->getColor() == 0 && head->getColor() == 1){
      if(Gparent->getLeftNext() == head && head->getRightNext() == thingy){
	//Left right case 4
	leftRotation(head, thingy);
	if(head->getParent() == NULL){
	  root = head;
	}
	node* tempP = head;
        head = Gparent;
        thingy = tempP;
        rightRotation(head, thingy);
	if(head->getParent() == NULL){
          root = head;
        }
        head->setColor(0);
        thingy->setColor(1);
      	
      }
      else if(Gparent->getRightNext() == head && head->getLeftNext() == thingy){
	//Right left case 4
	rightRotation(head, thingy);
	if(head->getParent() == NULL){
          root = head;
        }
        node* tempP = head;
        head = Gparent;
        thingy = tempP;
        leftRotation(head, thingy);
	if(head->getParent() == NULL){
          root = head;
        }
        head->setColor(0);
        thingy->setColor(1);
      }
      else if(Gparent->getRightNext() == head && head->getRightNext() == thingy){
	//Right Right case 5
	node* tempP = head;
	head = Gparent;
	thingy = tempP;
	leftRotation(head, thingy);
	if(head->getParent() == NULL){
          root = head;
        }
	head->setColor(0);
        thingy->setColor(1);
      }
      else if(Gparent->getLeftNext() == head && head->getLeftNext() == thingy){
        //Left Left case 5
	node* tempP = head;
        head = Gparent;
        thingy = tempP;
	rightRotation(head, thingy);
	if(head->getParent() == NULL){
          root = head;
        }
        head->setColor(0);
	thingy->setColor(1);
	return;
      }

    }
  }
}
//Performs a left rotation;
void leftRotation(node* &head, node* &thingy){
  node* thingyLeft = thingy->getLeftNext();
  node* tempP = head;
  head = thingy;
  thingy = tempP;
  head->setParent(thingy->getParent());
  head->setLeftNext(thingy);
  thingy->setRightNext(thingyLeft);
  if(thingy->getParent() != NULL){
    if(findChildSide(thingy->getParent(), thingy)){
      thingy->getParent()->setRightNext(head);
    }else{
      thingy->getParent()->setLeftNext(head);
    }
  }
  thingy->setParent(head);
  if(thingyLeft != NULL){
    thingyLeft->setParent(thingy);
  }
  int count = 0;
  printTree(head, count);
}
//Performs a right rotation
void rightRotation(node* &head, node* &thingy){
  node* thingyRight = thingy->getRightNext();
  node* tempP =	head;
  head = thingy;
  thingy = tempP;

  head->setParent(thingy->getParent());
  head->setRightNext(thingy);
  if(thingy->getParent() != NULL){
    if(findChildSide(thingy->getParent(), thingy)){
      thingy->getParent()->setRightNext(head);
    }else{
      thingy->getParent()->setLeftNext(head);
    }
  }
  
  thingy->setParent(head);
  thingy->setLeftNext(thingyRight);
  if(thingyRight != NULL){
    thingyRight->setParent(thingy);
  }
  int count = 0;
  printTree(head, count);
}


//DO NOT LOOK BEYOND THIS POINT
//goes to the left/right of each node depending on the node's data's relation to the passed in data. If we get to the end of the tree, then the number doesn't exist.
bool searchTree(node* head, int thingy){
  if(head == NULL){
    return false;
  }
  if(head->getVal() != thingy){
    if(head->getVal() > thingy){
      return searchTree(head->getLeftNext(), thingy);
    }
    else{
      return searchTree(head->getRightNext(), thingy);
    }
  }
  else{
    return true;
  }

  }

//Successor
node* successorFinder(node* head){
  if(head->getLeftNext() != NULL){
    return successorFinder(head->getLeftNext());
  }
  else{
    return head;
  }
}                                                                                                                                                                                                          

void deletion1(node* head, int thingy, node* &root){
  if(head == NULL){
    cout << "No Tree" << endl;
    return;
  }
  while(head->getVal() != thingy){
    if(head->getVal() > thingy && head->getLeftNext() != NULL){
      head = head->getLeftNext();
      continue;
    }
    else if(head->getRightNext() != NULL){
      head = head->getRightNext();
      continue;
    }
    cout << "Number does not exist in the tree" << endl;
    return;
  }
  int saveColor = head->getColor();
  node* x;
  node* Gparent = head->getParent();
  if(head->getLeftNext() == NULL){
    if(head == root){
      node* temp = root;
      root = root->getRightNext();
      delete temp;
    }
    else if(head->getRightNext() != NULL){
      x = head->getRightNext();
      x->setParent(head->getParent());
      bool childSide = findChildSide(head->getParent(), head);
      if(childSide){
	head->getParent()->setRightNext(x);
      }
      else{
	head->getParent()->setLeftNext(x);
      }
      delete head;
    }
    else{
      x = NULL;
      bool childSide = findChildSide(head->getParent(), head);
      if(childSide){
        head->getParent()->setRightNext(NULL);
      }
      else{
        head->getParent()->setLeftNext(NULL);
      }
      delete head;
    }
  }
  else if(head->getRightNext() == NULL){
    if(head == root){
      node* temp = root;
      root = root->getLeftNext();
      delete temp;
    }
    else if(head->getLeftNext() != NULL){
      x = head->getLeftNext();
      x->setParent(head->getParent());
      bool childSide = findChildSide(head->getParent(), head);
      if(childSide){
        head->getParent()->setRightNext(x);
      }
      else{
        head->getParent()->setLeftNext(x);
      }
      delete head;
    }
    else{
      x= NULL;
      bool childSide = findChildSide(head->getParent(), head);
      if(childSide){
        head->getParent()->setRightNext(NULL);
      }
      else{
        head->getParent()->setLeftNext(NULL);
      }
      delete head;
    }
  }
  else{
    node* successor = successorFinder(head->getRightNext());
    head->setVal(successor->getVal());
    node* successorKid = successor->getRightNext();
    if(successor == head->getRightNext()){
      successor->getParent()->setRightNext(successorKid);
    }
    else{
      successor->getParent()->setLeftNext(successorKid);
    }
    
    if(successorKid != NULL){
      successorKid->setParent(successor->getParent());
    }
    saveColor = successor->getColor();
    delete successor;
    deletion2(successorKid, saveColor, root, head);
    return;
  }
  cout << "This one" << endl;
  deletion2(x, saveColor, root, Gparent); 
}


void deletion2(node* newHead, int ogColor, node* &root, node* Gparent){
  if(newHead != NULL){
    if(ogColor == 1 || newHead->getColor() == 1){
      newHead->setColor(0);
      return;
    }
  }
  if((newHead == NULL || newHead->getColor() == 0) && ogColor == 0){
    cout << "HERE?" << endl;
    DoublyBlackCase(newHead, root, Gparent);
  }
  cout << "end of del2" << endl;
  return;
}


void DoublyBlackCase(node* newHead, node* &root, node* Gparent){
  node* ogGparent = Gparent;
  if(newHead == root){
    root->setColor(0);
    return;
  }
  bool checkSide = findChildSide(Gparent, newHead);
  node* uncle = NULL;
  if(checkSide){
    uncle = Gparent->getLeftNext();
  }else{
    uncle = Gparent->getRightNext();
  }
  cout << "Gp" << Gparent->getVal() << endl;
  cout << newHead << endl;
  cout << "uncle" << uncle->getVal() << endl;
  
  //Black uncle and kids
  

  
  if((uncle != NULL && uncle->getColor() == 0) && (uncle->getLeftNext() == NULL || uncle->getLeftNext()->getColor() == 0) && (uncle->getRightNext() == NULL || uncle->getRightNext()->getColor() == 0)\
){
    cout << "Got into correct black black situation" << endl;
    uncle->setColor(1);
    if(Gparent->getColor() == 0){
      DoublyBlackCase(Gparent, root, Gparent->getParent());
    }
    else{
      Gparent->setColor(0);
    }
 } 
  //Sibling black and red kids
  else if((uncle != NULL && uncle->getColor() == 0) && ((uncle->getRightNext() != NULL && uncle->getRightNext()->getColor() == 1) ||(uncle->getLeftNext() != NULL && uncle->getLeftNext()->getColor() == 1))){
    cout << "Sibling black and red children" << endl;
    node* nephew = NULL;
    if(uncle->getRightNext() != NULL && uncle->getRightNext()->getColor() == 1){
      nephew = uncle->getRightNext();
    }
    else{
      nephew = uncle->getLeftNext();
    }
    if(nephew != NULL){
      cout << "nephew" << nephew->getVal() << endl;
    }
    else{
      cout << "nephew" << nephew << endl;
    }

    //Left Left
    if(Gparent->getLeftNext() == uncle && uncle->getLeftNext() == nephew){
      if(Gparent == root){
	rightRotation(root, uncle);
      }
      else{
	rightRotation(Gparent, uncle);
      }
      nephew->setColor(0);
      return;
    }
    //Right Right
    else if(Gparent->getRightNext() == uncle && uncle->getRightNext() == nephew){
      if(Gparent == root){
        leftRotation(root, uncle);
      }
      else{
        leftRotation(Gparent, uncle);
      }
      nephew->setColor(0);
      return;
    }
    //Right Left
    //RECOLOR NODES FOR NEPHEW AND UNCLE JUST SWITCH COLORS
    else if(Gparent->getRightNext() == uncle && uncle->getLeftNext() == nephew){
      uncle->setColor(nephew->getColor());
      nephew->setColor(0);
      rightRotation(uncle, nephew);
      if(Gparent == root){
        leftRotation(root, uncle);
      }
      else{
        leftRotation(Gparent, uncle);
      }
      return;
    }
    //Left Right
    else if(Gparent->getLeftNext() == uncle && uncle->getRightNext() == nephew){
      uncle->setColor(nephew->getColor());
      nephew->setColor(0);
      if(uncle->getColor() == 0){
        uncle->setColor(1);
      }else{uncle->setColor(1);
      }
      leftRotation(uncle, nephew);
      if(Gparent == root){
        rightRotation(root, uncle);
      }
      else{
        rightRotation(Gparent, uncle);
      }
      return;
    }
  }
  else if(uncle->getColor() == 1){
    cout << "uncle color: " << uncle->getColor() << endl;
    Gparent->setColor(uncle->getColor());
    uncle->setColor(0);
    if(Gparent->getLeftNext() == uncle){
      if(Gparent == root){
	rightRotation(root, uncle);
      }
      else{
	rightRotation(Gparent, uncle);
      }
    }
    else if(Gparent->getRightNext() == uncle){
      if(Gparent == root){
	leftRotation(root, uncle);
      }
      else{
	leftRotation(Gparent, uncle);
      }
    }
    DoublyBlackCase(newHead, root, ogGparent);
  }
}
//Nightmare fuel
//Uses the above tree to access to the node that we want to remove
//Determines the number of children. Searches for successor (accidentally
//called predecessor in code, whoopsies) if their are two children, if their is just one replaces with that child. 
/*void delTree(node* head, node* previous, int thingy){
  if(head == NULL){
    cout << "The number doesn't exist in the data structure" << endl;
    return;
  }

  if(head->getVal() != thingy){
    if(head->getVal() > thingy){
      previous = head;
      head = head->getLeftNext();
      delTree(head, previous, thingy);
    }
    else{
      previous = head;
      head = head->getRightNext();
      delTree(head, previous, thingy);
    }
  }
  else{
    if(head->getLeftNext() != NULL && head->getRightNext() != NULL){
      node* temp = previous;
      previous = head;
      node* predecessor = delTree2(head->getRightNext(), previous, head->getVal());
      previous = temp;
      head->setVal(predecessor->getVal());
      delete predecessor;
    }
    else if(head->getLeftNext() != NULL){
      if(previous == head){
	previous->setVal(previous->getLeftNext()->getVal());
        node* temp = previous->getLeftNext();
        previous->setLeftNext(NULL);
        delete temp;
        return;
      }
      if(previous->getLeftNext() == head){
	previous->setLeftNext(head->getLeftNext());
	delete head;
	return;
      }
      else{
	previous->setRightNext(head->getLeftNext());
	delete head;
	return;
      }
    }
    else if(head->getRightNext() != NULL){
      if(previous == head){
	previous->setVal(previous->getRightNext()->getVal());
	node* temp = previous->getRightNext();
	previous->setRightNext(NULL);
	delete temp;
	return;
      }
      if(previous->getLeftNext() == head){
        previous->setLeftNext(head->getRightNext());
	delete head;
        return;
      }
      else{
        previous->setRightNext(head->getRightNext());
        delete head;
        return;
      }
    }
    else{
      if(previous == head){
	previous = NULL;
	return;
      }
      if(previous->getLeftNext() == head){
        previous->setLeftNext(NULL);
        delete head;
        return;
      }
      else{
        previous->setRightNext(NULL);
        delete head;
        return;
      }

    }
    //Create deletion function for (case 1, one child on head so just make it become new head and delete old head) or (case 2, two children so use predecessor method of right one then left all the way)
  }

}
*/
//Recursively runs thru tree to find a predecessor to be used in the main delete
/*node* delTree2(node* head, node* previous, int initialHead){
  if(head->getLeftNext() != NULL){
    previous = head;
    return delTree2(head->getLeftNext(), previous, initialHead);
  }
  else{
    if(previous->getVal() == initialHead){
      previous->setRightNext(head->getRightNext());
      return head;
    }
    previous->setLeftNext(head->getRightNext());
    return head;
  }

}
*/
