#include <iostream>
#include "node.h"
#include <cstring>

void enqueue(node* queueHead, node* thingyMaBob);
node* dequeue(node* queueHead);
void push(node* thing, node* stackHead);
node* pop(node* stackHead, node* current);
void parseInput(char* input, char arr[]);
void ShuntingDaYard(node* queuehead, node* stackhead, char arr[]);
int assignValue(char thingy);
using namespace std;

int main(){
  node* queueHead = NULL;
  node* stackHead = NULL;
  node* treeHead = NULL;
  bool gameRunnin = true;
  while(gameRunnin){
    char* input = new char[101];
    cout << "Please provide a math equation, less than 100 characters" << endl;
    cin.get(input, 100);
    cin.get();
    char arr[100];
    parseInput(input, arr);

  }

}

void enqueue(node* thingy, node* queueHead){
  node* temp = queueHead;
  queueHead = thingy;
  queueHead->setCenterNext(temp);
}

node* dequeue(node* queueHead, node* current, node* previous){
  if(current->getCenterNext() == NULL){
    previous->setCenterNext(NULL);
    return current;
  }
  else{
    if(current != queueHead){
      previous = previous->getCenterNext();
    }
    current = current->getCenterNext();
    dequeue(queueHead, current, previous);
  }
}

node* pop(node* &stackHead){
  node* temp = stackHead;
  if(stackHead->getCenterNext() != NULL){
    stackHead = stackHead->getCenterNext();
  }
  else{
    stackHead = NULL;
  }
  return temp;
}

void push(node* stackHead, node* thingy){
  node* temp = stackHead;
  stackHead = thingy;
  stackHead->setCenterNext(temp);

}

void parseInput(char* input, char arr[]){
  for(int i = 0; i < strlen(input); i++){
    arr[i] = input[i];
  }
}


node* peek(node* stackHead, node* current){
  if(current->getCenterNext() == NULL){
    return current;
  }
  else{
    current = current->getCenterNext();
    pop(stackHead);
  }
}

void ShuntingDaYard(node* queuehead, node* stackhead, char arr[], int size){
  for(int i = 0; i < size; i++){
    if(isdigit(arr[i])){
      node* thingy = new node(arr[i]);
      enqueue(thingy, queuehead);
    }
    else if(arr[i] == '+' || arr[i] == '-' || arr[i] == '*' || arr[i]  == '/' || arr[i] == '^'){
      while((stackhead->getVal() == '+' || stackhead->getVal() == '-' || stackhead->getVal() == '*' || stackhead->getVal() == '/' || stackhead->getVal() == '^') && ((assignValue(stackhead->getVal()) > assignValue(arr[i])) || (assignValue(stackhead->getVal()) == assignValue(arr[i]) && arr[i] != '^'))){
	enqueue(queuehead, pop(stackhead));
	node* thingy = new node(arr[i]);
	push(stackjead, thingy);
      }
    }else if(arr[i] == '('){
      node* thingy = new node(arr[i]);
      push(stackhead, thingy);
    }else if(arr[i] == ')'){
      while(stackhead->getVal() != '('){
	if(stackhead == NULL){
	  break;
	}
	enqueue(queuehead, pop(stackhead));
	if(stackhead->getVal() == '('){
	  delete pop(stackhead);
	}
	if(stackhead->getVal() == '+' || stackhead->getVal() == '-' || stackhead->getVal() == '*' || stackhead->getVal() == '/' || stackhead->getVal() == '^'){
	  enqueue(queuehead, pop(stackhead));
	}

	

      }

    }
 
}
}
int assignValue(char thingy){
  if(thingy == '+' || thingy == '-'){
    return 1;
  }
  else if(thingy == '*' || thingy == '/'){
    return 2;
  }
  else if(thingy == '^'){
    return 3;
  }
}
